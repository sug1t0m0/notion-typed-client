name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: 'Dry run (test without publishing)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run CI checks
        run: pnpm run ci
      
      - name: Get current version
        id: current_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
      - name: Bump version
        id: bump_version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ "${{ inputs.version_type }}" = "major" ]; then
            NEW_VERSION=$(npm version major --no-git-tag-version)
          elif [ "${{ inputs.version_type }}" = "minor" ]; then
            NEW_VERSION=$(npm version minor --no-git-tag-version)
          else
            NEW_VERSION=$(npm version patch --no-git-tag-version)
          fi
          
          # Remove 'v' prefix from npm version output
          NEW_VERSION=${NEW_VERSION#v}
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Update CHANGELOG
        id: changelog
        run: |
          # Create CHANGELOG.md if it doesn't exist
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> CHANGELOG.md
            echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Generate changelog entry
          VERSION="${{ steps.bump_version.outputs.new_version }}"
          DATE=$(date +%Y-%m-%d)
          
          # Create temporary file with new entry
          echo "## [$VERSION] - $DATE" > temp_changelog.md
          echo "" >> temp_changelog.md
          echo "### Added" >> temp_changelog.md
          echo "- Release $VERSION (${{ inputs.version_type }} version bump)" >> temp_changelog.md
          echo "" >> temp_changelog.md
          
          # Prepend to existing changelog (after the header)
          if grep -q "## \[" CHANGELOG.md; then
            # Insert after header but before first release entry
            awk '/^## \[/{print; exit} {print}' CHANGELOG.md > temp_header.md
            cat temp_header.md temp_changelog.md > combined.md
            awk '/^## \[/{skip=1} !skip{print}' CHANGELOG.md >> combined.md
            mv combined.md CHANGELOG.md
          else
            # No previous releases, append after header
            cat CHANGELOG.md temp_changelog.md > combined.md
            mv combined.md CHANGELOG.md
          fi
          
          rm -f temp_changelog.md temp_header.md
      
      - name: Commit version changes
        if: ${{ !inputs.dry_run }}
        run: |
          git add package.json CHANGELOG.md
          git commit -m "chore(release): bump version to ${{ steps.bump_version.outputs.new_version }}"
          git tag ${{ steps.bump_version.outputs.tag_name }}
      
      - name: Push changes
        if: ${{ !inputs.dry_run }}
        run: |
          git push origin main
          git push origin ${{ steps.bump_version.outputs.tag_name }}
      
      - name: Create GitHub Release
        if: ${{ !inputs.dry_run }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.tag_name }}
          release_name: Release ${{ steps.bump_version.outputs.tag_name }}
          body: |
            ## Changes in ${{ steps.bump_version.outputs.new_version }}
            
            This is a ${{ inputs.version_type }} release.
            
            ### What's Changed
            - Release ${{ steps.bump_version.outputs.new_version }} (${{ inputs.version_type }} version bump)
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.current_version.outputs.version }}...${{ steps.bump_version.outputs.tag_name }}
          draft: false
          prerelease: false
      
      - name: Publish to NPM
        if: ${{ !inputs.dry_run }}
        run: pnpm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Dry run summary
        if: ${{ inputs.dry_run }}
        run: |
          echo "🚀 Dry run completed successfully!"
          echo "📦 Would release version: ${{ steps.bump_version.outputs.new_version }}"
          echo "🏷️ Would create tag: ${{ steps.bump_version.outputs.tag_name }}"
          echo "📝 CHANGELOG.md has been updated"
          echo "✅ All checks passed - ready for actual release"