name: Auto Release

on:
  push:
    branches: [main]
    paths-ignore:
      - 'CHANGELOG.md'
      - 'package-lock.json'
      - 'pnpm-lock.yaml'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  analyze-commits:
    name: Analyze Commits
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.analyze.outputs.should_release }}
      version_type: ${{ steps.analyze.outputs.version_type }}
      release_notes: ${{ steps.analyze.outputs.release_notes }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Analyze commits for release
        id: analyze
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, analyzing all commits"
            COMMITS=$(git log --pretty=format:"%s" --no-merges)
          else
            echo "Analyzing commits since $LAST_TAG"
            COMMITS=$(git log --pretty=format:"%s" --no-merges $LAST_TAG..HEAD)
          fi
          
          echo "Analyzing commits:"
          echo "$COMMITS"
          
          # Initialize release detection
          SHOULD_RELEASE=false
          VERSION_TYPE=""
          RELEASE_NOTES=""
          
          # Check for breaking changes (major version)
          if echo "$COMMITS" | grep -qE "BREAKING CHANGE|!:"; then
            SHOULD_RELEASE=true
            VERSION_TYPE="major"
            echo "🚨 Breaking changes detected - major release required"
          # Check for features (minor version)
          elif echo "$COMMITS" | grep -qE "^feat(\(.+\))?:"; then
            SHOULD_RELEASE=true
            VERSION_TYPE="minor"
            echo "✨ New features detected - minor release required"
          # Check for fixes (patch version)
          elif echo "$COMMITS" | grep -qE "^fix(\(.+\))?:"; then
            SHOULD_RELEASE=true
            VERSION_TYPE="patch"
            echo "🐛 Bug fixes detected - patch release required"
          else
            echo "📝 No release-worthy changes detected"
          fi
          
          # Generate release notes
          if [ "$SHOULD_RELEASE" = "true" ]; then
            echo "### What's Changed" > release_notes.md
            echo "" >> release_notes.md
            
            # Breaking changes
            if echo "$COMMITS" | grep -qE "BREAKING CHANGE|!:"; then
              echo "#### 💥 Breaking Changes" >> release_notes.md
              echo "$COMMITS" | grep -E "BREAKING CHANGE|!:" | sed 's/^/- /' >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            # Features
            if echo "$COMMITS" | grep -qE "^feat(\(.+\))?:"; then
              echo "#### ✨ New Features" >> release_notes.md
              echo "$COMMITS" | grep -E "^feat(\(.+\))?:" | sed 's/^/- /' >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            # Bug fixes
            if echo "$COMMITS" | grep -qE "^fix(\(.+\))?:"; then
              echo "#### 🐛 Bug Fixes" >> release_notes.md
              echo "$COMMITS" | grep -E "^fix(\(.+\))?:" | sed 's/^/- /' >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            # Other changes
            if echo "$COMMITS" | grep -qvE "^(feat|fix)(\(.+\))?:|BREAKING CHANGE|!:"; then
              echo "#### 🔧 Other Changes" >> release_notes.md
              echo "$COMMITS" | grep -vE "^(feat|fix)(\(.+\))?:|BREAKING CHANGE|!:" | sed 's/^/- /' >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            RELEASE_NOTES=$(cat release_notes.md)
          fi
          
          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  auto-release:
    name: Auto Release
    runs-on: ubuntu-latest
    needs: analyze-commits
    if: needs.analyze-commits.outputs.should_release == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run CI checks
        run: pnpm run ci
      
      - name: Get current version
        id: current_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
      - name: Bump version
        id: bump_version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          VERSION_TYPE="${{ needs.analyze-commits.outputs.version_type }}"
          
          if [ "$VERSION_TYPE" = "major" ]; then
            npm version major --no-git-tag-version
          elif [ "$VERSION_TYPE" = "minor" ]; then
            npm version minor --no-git-tag-version
          else
            npm version patch --no-git-tag-version
          fi
          
          # Get the new version from package.json
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Update CHANGELOG
        run: |
          # Create CHANGELOG.md if it doesn't exist
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> CHANGELOG.md
            echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Generate changelog entry
          VERSION="${{ steps.bump_version.outputs.new_version }}"
          DATE=$(date +%Y-%m-%d)
          
          # Create temporary file with new entry
          echo "## [$VERSION] - $DATE" > temp_changelog.md
          echo "" >> temp_changelog.md
          echo "${{ needs.analyze-commits.outputs.release_notes }}" >> temp_changelog.md
          echo "" >> temp_changelog.md
          
          # Prepend to existing changelog (after the header)
          if grep -q "## \[" CHANGELOG.md; then
            # Insert after header but before first release entry
            awk '/^## \[/{print; exit} {print}' CHANGELOG.md > temp_header.md
            cat temp_header.md temp_changelog.md > combined.md
            awk '/^## \[/{skip=1} !skip{print}' CHANGELOG.md >> combined.md
            mv combined.md CHANGELOG.md
          else
            # No previous releases, append after header
            cat CHANGELOG.md temp_changelog.md > combined.md
            mv combined.md CHANGELOG.md
          fi
          
          rm -f temp_changelog.md temp_header.md
      
      - name: Commit version changes
        run: |
          git add package.json CHANGELOG.md
          git commit -m "chore(release): bump version to ${{ steps.bump_version.outputs.new_version }} [skip ci]"
          git tag ${{ steps.bump_version.outputs.tag_name }}
      
      - name: Push changes
        run: |
          git push origin main
          git push origin ${{ steps.bump_version.outputs.tag_name }}
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.tag_name }}
          release_name: Release ${{ steps.bump_version.outputs.tag_name }}
          body: |
            ## Release ${{ steps.bump_version.outputs.new_version }}
            
            This is an automated ${{ needs.analyze-commits.outputs.version_type }} release based on conventional commits.
            
            ${{ needs.analyze-commits.outputs.release_notes }}
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.current_version.outputs.version }}...${{ steps.bump_version.outputs.tag_name }}
          draft: false
          prerelease: false
      
      - name: Publish to NPM
        run: pnpm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}